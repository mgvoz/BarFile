{"ast":null,"code":"var _jsxFileName = \"/Users/MarissaGvozdenovich/Desktop/BarFile/client/src/components/Settings.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Navbar from './Navbar';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { createSettings, editSettings, deleteSetting } from '../actions/settings';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Settings({\n  settings\n}) {\n  _s();\n\n  var _user$result3, _user$result4, _user$result5, _thisUsersSettings, _thisUsersSettings2, _thisUsersSettings3, _thisUsersSettings4;\n\n  //set variables\n  const user = JSON.parse(localStorage.getItem('profile'));\n  var w = window.innerWidth;\n  const dispatch = useDispatch();\n  const history = useHistory(); //get current user's settings\n\n  var thisUsersSettings; //state to gather settings data\n\n  window.onload = () => {\n    thisUsersSettings = settings.filter(s => {\n      var _user$result, _user$result2;\n\n      return (user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.googleId) === (s === null || s === void 0 ? void 0 : s.creator) || (user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2._id) === (s === null || s === void 0 ? void 0 : s.creator);\n    });\n  };\n\n  const [settingData, setSettingData] = useState({\n    nameOfUser: user === null || user === void 0 ? void 0 : (_user$result3 = user.result) === null || _user$result3 === void 0 ? void 0 : _user$result3.name,\n    creator: (user === null || user === void 0 ? void 0 : (_user$result4 = user.result) === null || _user$result4 === void 0 ? void 0 : _user$result4.googleId) || (user === null || user === void 0 ? void 0 : (_user$result5 = user.result) === null || _user$result5 === void 0 ? void 0 : _user$result5._id),\n    createdAt: new Date().toDateString(),\n    distributers: ((_thisUsersSettings = thisUsersSettings) === null || _thisUsersSettings === void 0 ? void 0 : _thisUsersSettings.length) > 0 ? thisUsersSettings[0].distributers : [],\n    categories: ((_thisUsersSettings2 = thisUsersSettings) === null || _thisUsersSettings2 === void 0 ? void 0 : _thisUsersSettings2.length) > 0 ? thisUsersSettings[0].categories : [],\n    threshold: ((_thisUsersSettings3 = thisUsersSettings) === null || _thisUsersSettings3 === void 0 ? void 0 : _thisUsersSettings3.length) > 0 ? thisUsersSettings[0].threshold : ''\n  });\n  console.log(thisUsersSettings);\n  console.log(settingData); //save user setting input\n  //MAKE IT SO ONLY 1 CAN BE UPDATED AND KEEP THE REST THE SAME\n\n  const saveSettings = () => {\n    if (thisUsersSettings.length > 0) {\n      dispatch(editSettings(thisUsersSettings[0]._id, { ...settingData\n      }));\n      alert('Settings saved!');\n      history.push('/settings');\n    } else {\n      dispatch(createSettings({\n        settingData\n      }));\n      alert('Settings saved!');\n      history.push('/settings');\n    }\n  }; //clear user's settings completely\n\n\n  const clearSettings = () => {\n    if (thisUsersSettings.length > 0) {\n      var _thisUsersSettings$;\n\n      dispatch(deleteSetting((_thisUsersSettings$ = thisUsersSettings[0]) === null || _thisUsersSettings$ === void 0 ? void 0 : _thisUsersSettings$._id));\n      alert('Settings cleared!');\n    } else if (thisUsersSettings.length === 0) {\n      alert('No settings created yet.');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: w > 480 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"nav-section\",\n          className: \"col-2\",\n          children: /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-10\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"dash-heading\",\n            children: \"Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n            className: \"dash-line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"take-inventory\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"How will BarFile work for you?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"You'll be able to modify these settings at any time.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: saveSettings,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"distributers\",\n                children: [\"What \", /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"distributers\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 16\n                }, this), \" do you use to stock your bar? List them separated by commas.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                name: \"distributers\",\n                id: \"settings-textarea\",\n                cols: \"30\",\n                rows: \"5\",\n                value: settingData.distributers,\n                onChange: e => setSettingData({ ...settingData,\n                  distributers: e.target.value\n                }),\n                placeholder: thisUsersSettings.length > 0 ? thisUsersSettings[0].distributers : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"threshold\",\n                children: [\"What \", /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"threshold\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 16\n                }, this), \" would you like to use to indicate when it's time to reorder? (i.e. reorder when inventory for an item is 30% or less)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"threshold-input\",\n                type: \"text\",\n                name: \"threshold\",\n                id: \"settings-textarea\",\n                value: settingData.threshold,\n                onChange: e => setSettingData({ ...settingData,\n                  threshold: e.target.value\n                }),\n                placeholder: thisUsersSettings.length > 0 ? thisUsersSettings[0].threshold : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 10\n              }, this), \"%\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"categories\",\n                children: [\"What \", /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"categories\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 16\n                }, this), \" would you like to use to organize items for your bar? List them separated by commas.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                name: \"categories\",\n                id: \"settings-textarea\",\n                cols: \"30\",\n                rows: \"5\",\n                value: settingData.categories,\n                onChange: e => setSettingData({ ...settingData,\n                  categories: e.target.value\n                }),\n                placeholder: thisUsersSettings.length > 0 ? thisUsersSettings[0].categories : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"settings-button-desktop\",\n                type: \"submit\",\n                children: \"Save Settings\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 10\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"settings-button-desktop\",\n              id: \"clear-settings-btn\",\n              onClick: clearSettings,\n              children: \"Clear All Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"take-inventory\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"dash-heading-m\",\n          children: \"Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"dash-line-m\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"setting-subheading\",\n            children: \"How will BarFile work for you?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"You'll be able to modify these settings at any time.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: saveSettings,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"distributers\",\n              children: [\"What \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"distributers\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 15\n              }, this), \" do you use to stock your bar? List them separated by commas.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              name: \"distributers\",\n              id: \"settings-textarea\",\n              cols: \"30\",\n              rows: \"5\",\n              value: settingData.distributers,\n              onChange: e => setSettingData({ ...settingData,\n                distributers: e.target.value\n              }),\n              placeholder: ((_thisUsersSettings4 = thisUsersSettings) === null || _thisUsersSettings4 === void 0 ? void 0 : _thisUsersSettings4.length) > 0 ? thisUsersSettings[0].distributers : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"threshold\",\n              children: [\"What \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"threshold\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 15\n              }, this), \" would you like to use to indicate when it's time to reorder? (i.e. reorder when inventory for an item is 30% or less)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"threshold-input\",\n              type: \"text\",\n              name: \"threshold\",\n              id: \"settings-textarea\",\n              value: settingData.threshold,\n              onChange: e => setSettingData({ ...settingData,\n                threshold: e.target.value\n              }),\n              placeholder: thisUsersSettings.length > 0 ? thisUsersSettings[0].threshold : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 9\n            }, this), \"%\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"categories\",\n              children: [\"What \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"categories\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 15\n              }, this), \" would you like to use to organize items for your bar? List them separated by commas.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              name: \"categories\",\n              id: \"settings-textarea\",\n              cols: \"30\",\n              rows: \"5\",\n              value: settingData.categories,\n              onChange: e => setSettingData({ ...settingData,\n                categories: e.target.value\n              }),\n              placeholder: thisUsersSettings.length > 0 ? thisUsersSettings[0].categories : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"settings-button\",\n              type: \"submit\",\n              children: \"Save Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"settings-button\",\n            id: \"clear-settings-btn-m\",\n            onClick: clearSettings,\n            children: \"Clear All Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n}\n\n_s(Settings, \"XZuGf0PGztLdK3mQk++pv+DrLTA=\", false, function () {\n  return [useDispatch, useHistory];\n});\n\n_c = Settings;\nexport default Settings;\n\nvar _c;\n\n$RefreshReg$(_c, \"Settings\");","map":{"version":3,"sources":["/Users/MarissaGvozdenovich/Desktop/BarFile/client/src/components/Settings.js"],"names":["React","useState","Navbar","useDispatch","useHistory","createSettings","editSettings","deleteSetting","Settings","settings","user","JSON","parse","localStorage","getItem","w","window","innerWidth","dispatch","history","thisUsersSettings","onload","filter","s","result","googleId","creator","_id","settingData","setSettingData","nameOfUser","name","createdAt","Date","toDateString","distributers","length","categories","threshold","console","log","saveSettings","alert","push","clearSettings","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Navbar from './Navbar';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n\tcreateSettings,\n\teditSettings,\n\tdeleteSetting,\n} from '../actions/settings';\n\nfunction Settings({ settings }) {\n\t//set variables\n\tconst user = JSON.parse(localStorage.getItem('profile'));\n\tvar w = window.innerWidth;\n\tconst dispatch = useDispatch();\n\tconst history = useHistory();\n\n\t//get current user's settings\n\tvar thisUsersSettings;\n\t//state to gather settings data\n\twindow.onload = () => {\n\t\tthisUsersSettings = settings.filter(\n\t\t\t(s) =>\n\t\t\t\tuser?.result?.googleId === s?.creator ||\n\t\t\t\tuser?.result?._id === s?.creator,\n\t\t);\n\t};\n\tconst [settingData, setSettingData] = useState({\n\t\tnameOfUser: user?.result?.name,\n\t\tcreator: user?.result?.googleId || user?.result?._id,\n\t\tcreatedAt: new Date().toDateString(),\n\t\tdistributers:\n\t\t\tthisUsersSettings?.length > 0\n\t\t\t\t? thisUsersSettings[0].distributers\n\t\t\t\t: [],\n\t\tcategories:\n\t\t\tthisUsersSettings?.length > 0\n\t\t\t\t? thisUsersSettings[0].categories\n\t\t\t\t: [],\n\t\tthreshold:\n\t\t\tthisUsersSettings?.length > 0 ? thisUsersSettings[0].threshold : '',\n\t});\n\n\tconsole.log(thisUsersSettings);\n\tconsole.log(settingData);\n\n\t//save user setting input\n\t//MAKE IT SO ONLY 1 CAN BE UPDATED AND KEEP THE REST THE SAME\n\tconst saveSettings = () => {\n\t\tif (thisUsersSettings.length > 0) {\n\t\t\tdispatch(\n\t\t\t\teditSettings(thisUsersSettings[0]._id, {\n\t\t\t\t\t...settingData,\n\t\t\t\t}),\n\t\t\t);\n\t\t\talert('Settings saved!');\n\t\t\thistory.push('/settings');\n\t\t} else {\n\t\t\tdispatch(\n\t\t\t\tcreateSettings({\n\t\t\t\t\tsettingData,\n\t\t\t\t}),\n\t\t\t);\n\t\t\talert('Settings saved!');\n\t\t\thistory.push('/settings');\n\t\t}\n\t};\n\n\t//clear user's settings completely\n\tconst clearSettings = () => {\n\t\tif (thisUsersSettings.length > 0) {\n\t\t\tdispatch(deleteSetting(thisUsersSettings[0]?._id));\n\t\t\talert('Settings cleared!');\n\t\t} else if (thisUsersSettings.length === 0) {\n\t\t\talert('No settings created yet.');\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t{w > 480 ? (\n\t\t\t\t<div className='settings-container'>\n\t\t\t\t\t<div className='row'>\n\t\t\t\t\t\t<div id='nav-section' className='col-2'>\n\t\t\t\t\t\t\t<Navbar />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='col-10'>\n\t\t\t\t\t\t\t<h1 className='dash-heading'>Settings</h1>\n\t\t\t\t\t\t\t<hr className='dash-line' />\n\t\t\t\t\t\t\t<div className='take-inventory'>\n\t\t\t\t\t\t\t\t<h4>How will BarFile work for you?</h4>\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\tYou'll be able to modify these settings at\n\t\t\t\t\t\t\t\t\tany time.\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<form onSubmit={saveSettings}>\n\t\t\t\t\t\t\t\t\t<label htmlFor='distributers'>\n\t\t\t\t\t\t\t\t\t\tWhat <b>distributers</b> do you use to\n\t\t\t\t\t\t\t\t\t\tstock your bar? List them separated by\n\t\t\t\t\t\t\t\t\t\tcommas.\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\t\t\t\tname='distributers'\n\t\t\t\t\t\t\t\t\t\tid='settings-textarea'\n\t\t\t\t\t\t\t\t\t\tcols='30'\n\t\t\t\t\t\t\t\t\t\trows='5'\n\t\t\t\t\t\t\t\t\t\tvalue={settingData.distributers}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\t\tsetSettingData({\n\t\t\t\t\t\t\t\t\t\t\t\t...settingData,\n\t\t\t\t\t\t\t\t\t\t\t\tdistributers: e.target.value,\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tplaceholder={\n\t\t\t\t\t\t\t\t\t\t\tthisUsersSettings.length > 0\n\t\t\t\t\t\t\t\t\t\t\t\t? thisUsersSettings[0]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.distributers\n\t\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<label htmlFor='threshold'>\n\t\t\t\t\t\t\t\t\t\tWhat <b>threshold</b> would you like to\n\t\t\t\t\t\t\t\t\t\tuse to indicate when it's time to\n\t\t\t\t\t\t\t\t\t\treorder? (i.e. reorder when inventory\n\t\t\t\t\t\t\t\t\t\tfor an item is 30% or less)\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\tclassName='threshold-input'\n\t\t\t\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\t\t\t\tname='threshold'\n\t\t\t\t\t\t\t\t\t\tid='settings-textarea'\n\t\t\t\t\t\t\t\t\t\tvalue={settingData.threshold}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\t\tsetSettingData({\n\t\t\t\t\t\t\t\t\t\t\t\t...settingData,\n\t\t\t\t\t\t\t\t\t\t\t\tthreshold: e.target.value,\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tplaceholder={\n\t\t\t\t\t\t\t\t\t\t\tthisUsersSettings.length > 0\n\t\t\t\t\t\t\t\t\t\t\t\t? thisUsersSettings[0].threshold\n\t\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t%\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<label htmlFor='categories'>\n\t\t\t\t\t\t\t\t\t\tWhat <b>categories</b> would you like to\n\t\t\t\t\t\t\t\t\t\tuse to organize items for your bar? List\n\t\t\t\t\t\t\t\t\t\tthem separated by commas.\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\t\t\t\tname='categories'\n\t\t\t\t\t\t\t\t\t\tid='settings-textarea'\n\t\t\t\t\t\t\t\t\t\tcols='30'\n\t\t\t\t\t\t\t\t\t\trows='5'\n\t\t\t\t\t\t\t\t\t\tvalue={settingData.categories}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\t\tsetSettingData({\n\t\t\t\t\t\t\t\t\t\t\t\t...settingData,\n\t\t\t\t\t\t\t\t\t\t\t\tcategories: e.target.value,\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tplaceholder={\n\t\t\t\t\t\t\t\t\t\t\tthisUsersSettings.length > 0\n\t\t\t\t\t\t\t\t\t\t\t\t? thisUsersSettings[0]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.categories\n\t\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t></textarea>\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName='settings-button-desktop'\n\t\t\t\t\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tSave Settings\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName='settings-button-desktop'\n\t\t\t\t\t\t\t\t\tid='clear-settings-btn'\n\t\t\t\t\t\t\t\t\tonClick={clearSettings}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tClear All Settings\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<Navbar />\n\t\t\t\t\t<div className='take-inventory'>\n\t\t\t\t\t\t<h1 className='dash-heading-m'>Settings</h1>\n\t\t\t\t\t\t<hr className='dash-line-m' />\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h4 className='setting-subheading'>\n\t\t\t\t\t\t\t\tHow will BarFile work for you?\n\t\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\tYou'll be able to modify these settings at any\n\t\t\t\t\t\t\t\ttime.\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<form onSubmit={saveSettings}>\n\t\t\t\t\t\t\t\t<label htmlFor='distributers'>\n\t\t\t\t\t\t\t\t\tWhat <b>distributers</b> do you use to stock\n\t\t\t\t\t\t\t\t\tyour bar? List them separated by commas.\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\t\t\tname='distributers'\n\t\t\t\t\t\t\t\t\tid='settings-textarea'\n\t\t\t\t\t\t\t\t\tcols='30'\n\t\t\t\t\t\t\t\t\trows='5'\n\t\t\t\t\t\t\t\t\tvalue={settingData.distributers}\n\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\tsetSettingData({\n\t\t\t\t\t\t\t\t\t\t\t...settingData,\n\t\t\t\t\t\t\t\t\t\t\tdistributers: e.target.value,\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tplaceholder={\n\t\t\t\t\t\t\t\t\t\tthisUsersSettings?.length > 0\n\t\t\t\t\t\t\t\t\t\t\t? thisUsersSettings[0].distributers\n\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<label htmlFor='threshold'>\n\t\t\t\t\t\t\t\t\tWhat <b>threshold</b> would you like to use\n\t\t\t\t\t\t\t\t\tto indicate when it's time to reorder? (i.e.\n\t\t\t\t\t\t\t\t\treorder when inventory for an item is 30% or\n\t\t\t\t\t\t\t\t\tless)\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tclassName='threshold-input'\n\t\t\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\t\t\tname='threshold'\n\t\t\t\t\t\t\t\t\tid='settings-textarea'\n\t\t\t\t\t\t\t\t\tvalue={settingData.threshold}\n\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\tsetSettingData({\n\t\t\t\t\t\t\t\t\t\t\t...settingData,\n\t\t\t\t\t\t\t\t\t\t\tthreshold: e.target.value,\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tplaceholder={\n\t\t\t\t\t\t\t\t\t\tthisUsersSettings.length > 0\n\t\t\t\t\t\t\t\t\t\t\t? thisUsersSettings[0].threshold\n\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t%\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<label htmlFor='categories'>\n\t\t\t\t\t\t\t\t\tWhat <b>categories</b> would you like to use\n\t\t\t\t\t\t\t\t\tto organize items for your bar? List them\n\t\t\t\t\t\t\t\t\tseparated by commas.\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\t\t\tname='categories'\n\t\t\t\t\t\t\t\t\tid='settings-textarea'\n\t\t\t\t\t\t\t\t\tcols='30'\n\t\t\t\t\t\t\t\t\trows='5'\n\t\t\t\t\t\t\t\t\tvalue={settingData.categories}\n\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\tsetSettingData({\n\t\t\t\t\t\t\t\t\t\t\t...settingData,\n\t\t\t\t\t\t\t\t\t\t\tcategories: e.target.value,\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tplaceholder={\n\t\t\t\t\t\t\t\t\t\tthisUsersSettings.length > 0\n\t\t\t\t\t\t\t\t\t\t\t? thisUsersSettings[0].categories\n\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t></textarea>\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName='settings-button'\n\t\t\t\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tSave Settings\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName='settings-button'\n\t\t\t\t\t\t\t\tid='clear-settings-btn-m'\n\t\t\t\t\t\t\t\tonClick={clearSettings}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tClear All Settings\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</>\n\t);\n}\n\nexport default Settings;\n"]},"metadata":{},"sourceType":"module"}